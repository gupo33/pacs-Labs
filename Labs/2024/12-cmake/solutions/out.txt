cmake_minimum_required(VERSION 3.5)

project(HelloWorld)

# Generate executable.
add_executable(hello_world hello_world.cpp)


cmake_minimum_required(VERSION 3.5)

project(Student)

# Enable optimizations.
set(CMAKE_BUILD_TYPE Release)

# Generate executable.
set(SCRS "test.cpp;src/Student.cpp")
add_executable(test_student ${SCRS})

# Include directory with header files.
target_include_directories(test_student PUBLIC src)


cmake_minimum_required(VERSION 3.5)

project(UseLib)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

if(CMAKE_BUILD_TYPE)
  message("Manually set build type is: ${CMAKE_BUILD_TYPE}")
else()
  message("Setting build type to Release by default")
  set(CMAKE_BUILD_TYPE Release)
endif()

# Generate executable.
find_package (Eigen3 REQUIRED HINTS $ENV{mkEigenPrefix})

add_executable(main use_lib.cpp)
include_directories(${EIGEN3_INCLUDE_DIRS})

set_target_properties(main PROPERTIES CXX_STANDARD 17)

cmake_minimum_required(VERSION 3.5)

project(StudentLib)

# Enable optimizations.
set(CMAKE_BUILD_TYPE Release)

# Set library version to use.
set(LIB_VERSION "1.0" CACHE STRING "Library version to use.")

# Generate shared library from source files.
if(${LIB_VERSION} STREQUAL "1.0")
  # Generate library.
  add_library(student SHARED src/Student_v1.cpp)

  # Set library version.
  set_target_properties(student PROPERTIES VERSION 1.0)
elseif(${LIB_VERSION} STREQUAL "2.0")
  add_library(student SHARED src/Student_v2.cpp)
  set_target_properties(student PROPERTIES VERSION 2.0)
else()
  message(FATAL_ERROR "Wrong library version specified.")
endif()

# Include directory with header files.
target_include_directories(student PUBLIC src)


cmake_minimum_required(VERSION 3.5)

project(TestStudentLib)

# Generate executable.
add_executable(test_student_lib test.cpp)

# Include directory with header files.
target_include_directories(test_student_lib PUBLIC ${CMAKE_SOURCE_DIR}/../04-student_lib/src)

# Set library version to use.
set(LIB_VERSION "1.0" CACHE STRING "Library version to use.")

if(${LIB_VERSION} STREQUAL "2.0")
  # Define preprocessor macro.
  target_compile_definitions(test_student_lib PRIVATE STUDENT_VERSION_2)

  # Link to proper library version.
  target_link_libraries(test_student_lib ${CMAKE_SOURCE_DIR}/../04-student_lib/build/libstudent.so.2.0)
else()
  target_link_libraries(test_student_lib ${CMAKE_SOURCE_DIR}/../04-student_lib/build/libstudent.so.1.0)
endif()

# WARNING: modify LD_LIBRARY_PATH accordingly before execution, or pass a proper "-Wl,-rpath" flag.
